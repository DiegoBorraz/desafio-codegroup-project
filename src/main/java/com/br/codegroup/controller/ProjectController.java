package com.br.codegroup.controller;


import com.br.codegroup.dto.ProjectDTO;
import com.br.codegroup.dto.ProjectRequestDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;

@Tag(
        name = "Projects",
        description = "API para gerenciamento completo do portf√≥lio de projetos.\n\n" +
                "üìä **Funcionalidades**:\n" +
                "- CRUD completo de projetos\n" +
                "- Gest√£o de equipes e aloca√ß√µes\n" +
                "- C√°lculo autom√°tico de risco\n" +
                "- Controle de status e transi√ß√µes\n" +
                "- Relat√≥rios e analytics\n\n" +
                "üéØ **Regras de Neg√≥cio Implementadas**:\n" +
                "- Classifica√ß√£o de risco baseada em or√ßamento e prazo\n" +
                "- Fluxo sequencial de status (n√£o √© poss√≠vel pular etapas)\n" +
                "- Valida√ß√£o de gerentes e funcion√°rios\n" +
                "- Limites de aloca√ß√£o de membros\n" +
                "- Restri√ß√µes de exclus√£o por status"
)
public interface ProjectController {

    @Operation(
            summary = "Listar todos os projetos com pagina√ß√£o",
            description = "Retorna uma lista paginada de todos os projetos do portf√≥lio.\n\n" +
                    "**Caracter√≠sticas**:\n" +
                    "- Suporte a ordena√ß√£o por diversos campos\n" +
                    "- Pagina√ß√£o configur√°vel (page, size, sort)\n" +
            "- Inclui dados de gerente e equipe\n\n" +
            "üìå **Cen√°rios de Uso**:\n" +
            "- Visualiza√ß√£o geral do portf√≥lio\n" +
            "- Dashboard de projetos\n" +
            "- An√°lise de capacidade",
    parameters = {
        @Parameter(
                name = "page",
                description = "N√∫mero da p√°gina (0-based)",
                example = "0"
        ),
        @Parameter(
                name = "size",
                description = "Quantidade de itens por p√°gina",
                example = "10"
        ),
        @Parameter(
                name = "sort",
                description = "Campo para ordena√ß√£o (ex: name,asc)",
                example = "name,asc"
        )
    }
    )
    @ApiResponse(
            responseCode = "200",
            description = "Lista de projetos recuperada com sucesso",
            content = @Content(schema = @Schema(implementation = Page.class))
    )
    ResponseEntity<Page<ProjectDTO>> getAllProjects(Pageable pageable);

    @Operation(
            summary = "Buscar projeto por ID",
            description = "Recupera os detalhes completos de um projeto espec√≠fico.\n\n" +
                    "**Inclui**:\n" +
                    "- Dados b√°sicos do projeto\n" +
                    "- Informa√ß√µes do gerente respons√°vel\n" +
            "- Lista de membros da equipe\n" +
            "- Classifica√ß√£o de risco calculada\n\n" +
            "üìå **Cen√°rios de Uso**:\n" +
            "- Edi√ß√£o de projetos\n" +
            "- Visualiza√ß√£o de detalhes\n" +
            "- An√°lise de projeto espec√≠fico",
    parameters = {
        @Parameter(
                name = "id",
                description = "ID √∫nico do projeto",
                required = true,
                example = "1"
        )
    }
    )
    @ApiResponse(
            responseCode = "200",
            description = "Projeto encontrado com sucesso",
            content = @Content(schema = @Schema(implementation = ProjectDTO.class))
    )
    @ApiResponse(
            responseCode = "404",
            description = "Projeto n√£o encontrado"
    )
    ResponseEntity<ProjectDTO> getProjectById(@PathVariable Long id);

    @Operation(
            summary = "Criar novo projeto",
            description = "Cria um novo projeto no portf√≥lio com valida√ß√µes completas.\n\n" +
                    "**Valida√ß√µes Aplicadas**:\n" +
                      "- Gerente deve existir e ter atribui√ß√£o 'gerente'\n" +
            "- Membros devem existir e ter atribui√ß√£o 'funcionario'\n" +
            "- Projeto deve ter entre 1 e 10 membros\n" +
            "- Membros n√£o podem estar em mais de 3 projetos ativos\n" +
            "- Datas devem ser consistentes\n\n" +
            "üìå **Cen√°rios de Uso**:\n" +
            "- Inicia√ß√£o de novos projetos\n" +
            "- Planejamento de portf√≥lio\n" +
            "- Aloca√ß√£o de recursos",
    requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
            description = "Dados do projeto a ser criado",
            required = true,
            content = @Content(schema = @Schema(implementation = ProjectRequestDTO.class))
    )
    )
    @ApiResponse(
            responseCode = "201",
            description = "Projeto criado com sucesso",
            content = @Content(schema = @Schema(implementation = ProjectDTO.class))
    )
    @ApiResponse(
            responseCode = "400",
            description = "Dados inv√°lidos ou viola√ß√£o de regras de neg√≥cio"
    )
    @ApiResponse(
            responseCode = "404",
            description = "Gerente ou membros n√£o encontrados"
    )
    ResponseEntity<ProjectDTO> createProject(@Valid @RequestBody ProjectRequestDTO projectRequestDTO);

    @Operation(
            summary = "Atualizar projeto existente",
            description = "Atualiza os dados de um projeto existente com valida√ß√µes completas.\n\n" +
                    "**Valida√ß√µes Aplicadas**:\n" +
                      "- Transi√ß√µes de status devem seguir sequ√™ncia l√≥gica\n" +
            "- Projetos com status iniciado/andamento/encerrado n√£o podem ter status alterado\n" +
            "- Valida√ß√µes de gerente e membros mantidas\n" +
            "- Recalcula classifica√ß√£o de risco automaticamente\n\n" +
            "üìå **Cen√°rios de Uso**:\n" +
            "- Atualiza√ß√£o de informa√ß√µes do projeto\n" +
            "- Progress√£o de status\n" +
            "- Realoca√ß√£o de recursos",
    parameters = {
        @Parameter(
                name = "id",
                description = "ID √∫nico do projeto a ser atualizado",
                required = true,
                example = "1"
        )
    },
    requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
            description = "Novos dados do projeto",
            required = true,
            content = @Content(schema = @Schema(implementation = ProjectRequestDTO.class))
    )
    )
    @ApiResponse(
            responseCode = "200",
            description = "Projeto atualizado com sucesso",
            content = @Content(schema = @Schema(implementation = ProjectDTO.class))
    )
    @ApiResponse(
            responseCode = "400",
            description = "Dados inv√°lidos ou viola√ß√£o de regras de neg√≥cio"
    )
    @ApiResponse(
            responseCode = "404",
            description = "Projeto, gerente ou membros n√£o encontrados"
    )
    ResponseEntity<ProjectDTO> updateProject(
            @PathVariable Long id,
            @Valid @RequestBody ProjectRequestDTO projectRequestDTO);

    @Operation(
            summary = "Excluir projeto",
            description = "Remove um projeto do portf√≥lio com valida√ß√µes de status.\n\n" +
                    "**Restri√ß√µes**:\n" +
                      "- Projetos com status 'iniciado', 'em andamento' ou 'encerrado' n√£o podem ser exclu√≠dos\n" +
            "- Apenas projetos em status inicial podem ser removidos\n\n" +
            "üìå **Cen√°rios de Uso**:\n" +
            "- Remo√ß√£o de projetos cancelados\n" +
            "- Limpeza de projetos em planejamento\n" +
            "- Corre√ß√£o de cadastros incorretos",
    parameters = {
        @Parameter(
                name = "id",
                description = "ID √∫nico do projeto a ser exclu√≠do",
                required = true,
                example = "1"
        )
    }
    )
    @ApiResponse(
            responseCode = "204",
            description = "Projeto exclu√≠do com sucesso"
    )
    @ApiResponse(
            responseCode = "400",
            description = "N√£o √© poss√≠vel excluir projeto com status atual"
    )
    @ApiResponse(
            responseCode = "404",
            description = "Projeto n√£o encontrado"
    )
    ResponseEntity<Void> deleteProject(@PathVariable Long id);

    @Operation(
            summary = "Buscar projetos por nome",
            description = "Filtra projetos por nome com correspond√™ncia parcial (case insensitive).\n\n" +
                    "**Funcionalidades**:\n" +
                      "- Busca por substring no nome\n" +
            "- Suporte a pagina√ß√£o e ordena√ß√£o\n" +
            "- Retorna resultados parciais\n\n" +
            "üìå **Cen√°rios de Uso**:\n" +
            "- Busca r√°pida de projetos\n" +
            "- Filtragem por nome\n" +
            "- Localiza√ß√£o de projetos espec√≠ficos",
    parameters = {
        @Parameter(
                name = "name",
                description = "Termo de busca para o nome do projeto",
                required = true,
                example = "sistema"
        ),
        @Parameter(
                name = "page",
                description = "N√∫mero da p√°gina (0-based)",
                example = "0"
        ),
        @Parameter(
                name = "size",
                description = "Quantidade de itens por p√°gina",
                example = "10"
        ),
        @Parameter(
                name = "sort",
                description = "Campo para ordena√ß√£o",
                example = "name,asc"
        )
    }
    )
    @ApiResponse(
            responseCode = "200",
            description = "Projetos filtrados por nome",
            content = @Content(schema = @Schema(implementation = Page.class))
    )
    ResponseEntity<Page<ProjectDTO>> getProjectsByName(
            @RequestParam String name,
            Pageable pageable);

    @Operation(
            summary = "Buscar projetos por status",
            description = "Filtra projetos por status espec√≠fico.\n\n" +
                    "**Status dispon√≠veis**:\n" +
                    "- UNDER_REVIEW (em an√°lise)\n" +
            "- REVIEW_COMPLETED (an√°lise realizada)\n" +
            "- REVIEW_APPROVED (an√°lise aprovada)\n" +
            "- STARTED (iniciado)\n" +
            "- PLANNED (planejado)\n" +
            "- IN_PROGRESS (em andamento)\n" +
            "- COMPLETED (encerrado)\n" +
            "- CANCELLED (cancelado)\n\n" +
            "üìå **Cen√°rios de Uso**:\n" +
            "- Filtro por fase do projeto\n" +
            "- Relat√≥rios por status\n" +
            "- Gest√£o por estado",
    parameters = {
        @Parameter(
                name = "status",
                description = "Status do projeto para filtro",
                required = true,
                example = "IN_PROGRESS",
                schema = @Schema(
                        type = "string",
                        allowableValues = {
                                "UNDER_REVIEW", "REVIEW_COMPLETED", "REVIEW_APPROVED",
                                "STARTED", "PLANNED", "IN_PROGRESS", "COMPLETED", "CANCELLED"
                        }
                )
        ),
        @Parameter(
                name = "page",
                description = "N√∫mero da p√°gina (0-based)",
                example = "0"
        ),
        @Parameter(
                name = "size",
                description = "Quantidade de itens por p√°gina",
                example = "10"
        ),
        @Parameter(
                name = "sort",
                description = "Campo para ordena√ß√£o",
                example = "name,asc"
        )
    }
    )
    @ApiResponse(
            responseCode = "200",
            description = "Projetos filtrados por status",
            content = @Content(schema = @Schema(implementation = Page.class))
    )
    @ApiResponse(
            responseCode = "400",
            description = "Status inv√°lido"
    )
    ResponseEntity<Page<ProjectDTO>> getProjectsByStatus(
            @RequestParam String status,
            Pageable pageable);

    @Operation(
            summary = "Buscar projetos por gerente",
            description = "Filtra projetos por gerente respons√°vel.\n\n" +
                    "**Valida√ß√µes**:\n" +
                      "- Gerente deve existir\n" +
            "- Gerente deve ter atribui√ß√£o 'gerente'\n\n" +
            "üìå **Cen√°rios de Uso**:\n" +
            "- Visualiza√ß√£o de portf√≥lio por gerente\n" +
            "- Gest√£o de responsabilidades\n" +
            "- An√°lise de carga de trabalho",
    parameters = {
        @Parameter(
                name = "managerId",
                description = "ID do gerente respons√°vel",
                required = true,
                example = "1"
        ),
        @Parameter(
                name = "page",
                description = "N√∫mero da p√°gina (0-based)",
                example = "0"
        ),
        @Parameter(
                name = "size",
                description = "Quantidade de itens por p√°gina",
                example = "10"
        ),
        @Parameter(
                name = "sort",
                description = "Campo para ordena√ß√£o",
                example = "name,asc"
        )
    }
    )
    @ApiResponse(
            responseCode = "200",
            description = "Projetos do gerente especificado",
            content = @Content(schema = @Schema(implementation = Page.class))
    )
    @ApiResponse(
            responseCode = "404",
            description = "Gerente n√£o encontrado ou n√£o √© gerente"
    )
    ResponseEntity<Page<ProjectDTO>> getProjectsByManager(
            @PathVariable Long managerId,
            Pageable pageable);
}