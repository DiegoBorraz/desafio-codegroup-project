package com.br.codegroup.controller;


import com.br.codegroup.dto.MemberDTO;
import com.br.codegroup.dto.MemberRequestDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.util.List;


@Tag(
        name = "Members",
        description = "API REST externa para gerenciamento de membros (funcion√°rios e gerentes).\n\n" +
                "üìã **Regras de Neg√≥cio**:\n" +
                "- Apenas duas atribui√ß√µes s√£o permitidas: 'gerente' ou 'funcionario'\n" +
                "- Gerentes podem ser respons√°veis por projetos\n" +
                "- Apenas funcion√°rios podem ser associados a projetos como membros da equipe\n" +
                "- Cada membro deve ter um nome √∫nico por atribui√ß√£o"
)
public interface MemberController {

    @Operation(
            summary = "Criar novo membro",
            description = "Cria um novo membro na base. \n\n" +
                    "**Valida√ß√µes**:\n" +
                    "- Nome √© obrigat√≥rio e deve ser √∫nico por atribui√ß√£o\n" +
                    "- Atribui√ß√£o deve ser 'gerente' ou 'funcionario'\n" +
                    "- Membros duplicados (mesmo nome e atribui√ß√£o) n√£o s√£o permitidos\n\n" +
                    "üìå **Cen√°rios de Uso**:\n" +
                    "- Cadastro inicial de gerentes para gerenciar projetos\n" +
                    "- Cadastro de funcion√°rios para composi√ß√£o de equipes de projeto\n\n" +
                    "üéØ **Exemplo de uso**: Cadastrar um gerente para ser respons√°vel por um projeto",
            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    description = "Dados do membro a ser criado",
                    required = true
            )
    )
    @ApiResponse(
            responseCode = "201",
            description = "Membro criado com sucesso",
            content = @Content(schema = @Schema(implementation = MemberDTO.class))
    )
    @ApiResponse(
            responseCode = "400",
            description = "Dados inv√°lidos ou membro j√° existe"
    )
    ResponseEntity<MemberDTO> createMember(@Valid @RequestBody MemberRequestDTO memberRequestDTO);

    @Operation(
            summary = "Buscar membro por ID",
            description = "Recupera os dados de um membro espec√≠fico pelo seu identificador √∫nico.\n\n" +
                    "**Valida√ß√µes**:\n" +
                    "- ID deve existir na base de dados\n" +
                    "- Retorna 404 se o membro n√£o for encontrado\n\n" +
                    "üìå **Cen√°rios de Uso**:\n" +
                    "- Consultar dados de um gerente para associar a um projeto\n" +
                    "- Verificar se um funcion√°rio existe antes de adicionar √† equipe\n\n" +
                    "üéØ **Exemplo de uso**: Buscar dados de um gerente para definir como respons√°vel de projeto"
    )
    @ApiResponse(
            responseCode = "200",
            description = "Membro encontrado com sucesso",
            content = @Content(schema = @Schema(implementation = MemberDTO.class))
    )
    @ApiResponse(
            responseCode = "404",
            description = "Membro n√£o encontrado"
    )
    ResponseEntity<MemberDTO> getMemberById(@PathVariable Long id);

    @Operation(
            summary = "Listar todos os membros",
            description = "Retorna uma lista com todos os membros cadastrados no sistema mockado.\n\n" +
                    "**Observa√ß√µes**:\n" +
                    "- Retorna lista vazia se n√£o houver membros cadastrados\n" +
                    "- Ordena√ß√£o padr√£o por nome\n\n" +
                    "üìå **Cen√°rios de Uso**:\n" +
                    "- Visualizar todos os recursos humanos dispon√≠veis\n" +
                    "- Selecionar gerentes para projetos\n" +
                    "- Selecionar funcion√°rios para equipes\n\n" +
                    "üéØ **Exemplo de uso**: Listar todos os membros para composi√ß√£o de equipes de projeto"
    )
    @ApiResponse(
            responseCode = "200",
            description = "Lista de membros recuperada com sucesso",
            content = @Content(array = @ArraySchema(schema = @Schema(implementation = MemberDTO.class)))
    )
    ResponseEntity<List<MemberDTO>> getAllMembers();

    @Operation(
            summary = "Listar membros por atribui√ß√£o",
            description = "Filtra membros por tipo de atribui√ß√£o (cargo).\n\n" +
                    "**Valores permitidos**:\n" +
                    "- 'gerente': Membros com fun√ß√£o de gest√£o\n" +
                    "- 'funcionario': Membros para composi√ß√£o de equipes\n\n" +
                    "**Valida√ß√µes**:\n" +
                    "- Atribui√ß√£o deve ser 'gerente' ou 'funcionario'\n" +
                    "- Retorna lista vazia se n√£o houver membros com a atribui√ß√£o especificada\n\n" +
                    "üìå **Cen√°rios de Uso**:\n" +
                    "- Buscar apenas gerentes para atribui√ß√£o a projetos\n" +
                    "- Buscar apenas funcion√°rios para forma√ß√£o de equipes\n" +
                    "- Relat√≥rios por tipo de atribui√ß√£o\n\n" +
                    "üéØ **Exemplo de uso**: Listar todos os funcion√°rios dispon√≠veis para aloca√ß√£o em projetos",
            parameters = {
                    @Parameter(
                            name = "assignment",
                            description = "Tipo de atribui√ß√£o: 'gerente' ou 'funcionario'",
                            required = true,
                            example = "gerente",
                            schema = @Schema(
                                    type = "string",
                                    allowableValues = {"gerente", "funcionario"},
                                    description = "Cargo do membro no sistema"
                            )
                    )
            }
    )
    @ApiResponse(
            responseCode = "200",
            description = "Lista filtrada por atribui√ß√£o",
            content = @Content(array = @ArraySchema(schema = @Schema(implementation = MemberDTO.class)))
    )
    @ApiResponse(
            responseCode = "400",
            description = "Atribui√ß√£o inv√°lida"
    )
    ResponseEntity<List<MemberDTO>> getMembersByAssignment(@RequestParam String assignment);
}